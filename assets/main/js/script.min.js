import { preloadImages } from "../../libs/utils.js";
let lenis = new Lenis();
function footer() {
  var e,
    t,
    r = document.getElementById("footerLine");
  r
    ? ((e = r.getContext("2d")),
      (r.width = window.innerWidth),
      (r.height = 50),
      (t = r.width),
      (r = r.height),
      e.clearRect(0, 0, t, r),
      (e.strokeStyle = "#00FFFF"),
      (e.lineWidth = 2),
      e.beginPath(),
      e.moveTo(0, 5),
      e.lineTo(0.17 * t, 5),
      e.lineTo(0.19 * t, 40),
      e.lineTo(t, 40),
      e.stroke())
    : console.warn("Canvas not found!");
}
lenis.on("scroll", ScrollTrigger.update),
  gsap.ticker.add((e) => {
    lenis.raf(1e3 * e);
  }),
  gsap.ticker.lagSmoothing(0);
let splitTextInstances = [];
function animationText() {
  splitTextInstances.forEach((e) => e.revert()),
    (splitTextInstances.length = 0),
    gsap.registerPlugin(ScrollTrigger, SplitText),
    gsap.utils.toArray(".effect-heading").forEach((e) => {
      var t = new SplitText(e, {
        type: "words, chars",
        charsClass: "char",
        wordsClass: "word"
      });
      splitTextInstances.push(t),
        gsap.fromTo(
          t.chars,
          {
            filter: "blur(10px)",
            y: 10,
            willChange: "filter, transform",
            opacity: 0,
            skewX: "-3deg"
          },
          {
            ease: "power3.out",
            filter: "blur(0px)",
            y: 0,
            skewX: "0deg",
            stagger: 0.05,
            opacity: 1,
            duration: 2,
            scrollTrigger: { trigger: e, start: "top 60%" }
          }
        );
    }),
    gsap.utils.toArray(".effect-description").forEach((e) => {
      var t = new SplitText(e, {
        type: "lines",
        linesClass: "line",
        mask: "lines"
      });
      splitTextInstances.push(t),
        gsap.fromTo(
          t.lines,
          { y: 40, willChange: "transform" },
          {
            y: 0,
            duration: 2,
            ease: "power3.out",
            stagger: 0.05,
            scrollTrigger: { trigger: e, start: "top 60%" }
          }
        );
    }),
    gsap.utils.toArray(".effect-fade-up").forEach((e) => {
      var t = parseFloat(e.dataset.start) || "50%";
      gsap.fromTo(
        e,
        { y: 20, opacity: 0, willChange: "transform" },
        {
          y: 0,
          duration: 1,
          opacity: 1,
          ease: "power3.out",
          scrollTrigger: { trigger: e, start: `top ${t}%` }
        }
      );
    });
}
let splitTextInstancesAuto = [];
function animationTextAuto() {
  splitTextInstancesAuto.forEach((e) => e.revert()),
    (splitTextInstancesAuto.length = 0),
    gsap.registerPlugin(ScrollTrigger, SplitText),
    gsap.utils.toArray(".effect-heading-auto").forEach((e) => {
      e = new SplitText(e, {
        type: "words, chars",
        charsClass: "char",
        wordsClass: "word"
      });
      splitTextInstancesAuto.push(e),
        gsap.fromTo(
          e.chars,
          {
            filter: "blur(10px)",
            y: 10,
            willChange: "filter, transform",
            opacity: 0,
            skewX: "-3deg"
          },
          {
            ease: "power3.out",
            filter: "blur(0px)",
            y: 0,
            skewX: "0deg",
            stagger: 0.05,
            opacity: 1,
            duration: 2
          }
        );
    }),
    gsap.utils.toArray(".effect-description-auto").forEach((e) => {
      e = new SplitText(e, {
        type: "lines",
        linesClass: "line",
        mask: "lines"
      });
      splitTextInstancesAuto.push(e),
        gsap.fromTo(
          e.lines,
          { y: 40, willChange: "transform" },
          { y: 0, duration: 2, ease: "power3.out", stagger: 0.05 }
        );
    }),
    gsap.utils.toArray(".effect-fade-up-auto").forEach((e) => {
      r,
        gsap.fromTo(
          e,
          { y: 20, opacity: 0, willChange: "transform" },
          { y: 0, duration: 1, opacity: 1, ease: "power3.out", delay: 1.5 }
        );
    });
}
function animateTextKaraoke() {
  $(".effect-karaoke").length < 1 ||
    (gsap.registerPlugin(ScrollTrigger, SplitText),
    gsap.utils.toArray(".effect-karaoke").forEach((e) => {
      var t = new SplitText(e, {
        type: "words, chars",
        wordsClass: "word",
        charsClass: "char"
      });
      gsap.to(t.chars, {
        color: "#00ffff",
        duration: 0.6,
        stagger: 0.05,
        ease: "power3.out",
        scrollTrigger: {
          trigger: e,
          start: "top 90%",
          end: "top 30%",
          scrub: !0
        }
      });
    }));
}
function animation() {
  gsap.utils.toArray(".parallax-trigger").forEach((e) => {
    var t = e.querySelector("img");
    t &&
      gsap
        .timeline({ scrollTrigger: { trigger: e, scrub: !0, pin: !1 } })
        .fromTo(
          t,
          { yPercent: -10, ease: "none" },
          { yPercent: 10, ease: "none" }
        );
  }),
    gsap.utils.toArray(".fade-in-img").forEach((e) => {
      gsap.fromTo(
        e,
        { autoAlpha: 0 },
        {
          autoAlpha: 1,
          duration: 1,
          ease: "power3.out",
          scrollTrigger: { trigger: e, start: "top 50%", end: "bottom 30%" }
        }
      );
    });
}
function magicCursor() {
  var t = document.querySelector(".magic-cursor");
  document.addEventListener("click", (e) => {
    t.classList.add("scale-in"),
      setTimeout(() => {
        t.classList.remove("scale-in");
      }, 500);
  }),
    gsap.set(t, { xPercent: -50, yPercent: -50, opacity: 0 });
  let r, a;
  window.addEventListener("mousemove", (e) => {
    (r = e.clientX),
      (a = e.clientY),
      gsap.to(t, { x: r, y: a, opacity: 1, duration: 0.1 });
  }),
    document.addEventListener("mouseout", function (e) {
      e.relatedTarget ||
        e.toElement ||
        gsap.to(t, { opacity: 0, duration: 0.2 });
    }),
    document.addEventListener("mouseover", function () {
      gsap.to(t, { opacity: 1, duration: 0.2 });
    });
  var e = document.querySelectorAll("[data-cursor-text],a[href]"),
    s = document.querySelector(".magic-cursor .cursor");
  e.forEach((e) => {
    e.addEventListener("mouseenter", () => {
      s.classList.add("active");
    }),
      e.addEventListener("mouseleave", () => {
        s.classList.remove("active");
      });
  });
}
function header() {
  let t = document.querySelector(".header-hambuger"),
    r = document.querySelector(".header-menu"),
    e = document.querySelector("li.menu-item-has-children");
  t.addEventListener("click", () => {
    t.classList.toggle("active"), r.classList.toggle("active");
  }),
    document.addEventListener("click", (e) => {
      t.contains(e.target) ||
        r.contains(e.target) ||
        (t.classList.remove("active"), r.classList.remove("active"));
    }),
    e.addEventListener("mouseenter", () => {
      e.classList.add("active");
    }),
    gsap.to(".header", {
      scrollTrigger: {
        trigger: "body",
        start: "top+=100 top",
        toggleClass: { targets: ".header", className: "scrolled" },
        once: !1
      }
    });
}
function ourService() {
  function t(e) {
    var t = this.querySelector(".card-item"),
      r = t.offsetHeight / 2;
    t.style.transform =
      "rotateX(" +
      -(e.offsetY - r) / 30 +
      "deg) rotateY(" +
      (e.offsetX - t.offsetWidth / 2) / 15 +
      "deg)";
  }
  function r(e) {
    this.querySelector(".card-item").style.transform = "rotate(0)";
  }
  $(".our-services").length < 1 ||
    (document.querySelectorAll(".our-services .card").forEach((e) => {
      e.addEventListener("mousemove", t), e.addEventListener("mouseout", r);
    }),
    $(".consultancy .item").on("click", function () {
      var e = $(this);
      e.hasClass("active") ||
        ($(".consultancy .item").removeClass("active"),
        e.addClass("active"),
        setTimeout(() => {
          animationText();
        }, 500));
    }));
}
function bannerParallax() {
  var e = document.querySelector(".banner picture img");
  gsap.fromTo(
    e,
    { yPercent: -10 },
    {
      scrollTrigger: {
        trigger: ".banner",
        start: "top top",
        end: "bottom 30%",
        scrub: 1
      },
      ease: "power3.out",
      yPercent: -5
    }
  );
}
function particleEffect() {
  let t = document.getElementById("particles"),
    s = t.getContext("2d");
  function e() {
    (t.width = window.innerWidth), (t.height = window.innerHeight);
  }
  e(), window.addEventListener("resize", e);
  class r {
    constructor() {
      this.reset();
    }
    reset() {
      (this.x = Math.random() * t.width),
        (this.y = Math.random() * t.height),
        (this.size = 2 * Math.random() + 0.5),
        (this.speedX = 2 * Math.random() - 1),
        (this.speedY = 2 * Math.random() - 1),
        (this.opacity = 0.5 * Math.random() + 0.1);
    }
    update() {
      (this.x += this.speedX),
        (this.y += this.speedY),
        (this.x < 0 || this.x > t.width) && (this.speedX *= -1),
        (this.y < 0 || this.y > t.height) && (this.speedY *= -1);
    }
    draw() {
      s.beginPath(),
        s.arc(this.x, this.y, this.size, 0, 2 * Math.PI),
        (s.fillStyle = `rgba(255, 255, 255, ${this.opacity})`),
        s.fill();
    }
  }
  let o = Array.from({ length: 200 }, () => new r()),
    i = 0,
    n = 0;
  document.addEventListener("mousemove", (e) => {
    (i = e.clientX), (n = e.clientY);
  }),
    (function e() {
      s.clearRect(0, 0, t.width, t.height),
        o.forEach((e) => {
          e.update(), e.draw();
        }),
        o.forEach((a, e) => {
          o.slice(e + 1).forEach((e) => {
            var t = a.x - e.x,
              r = a.y - e.y;
            (t = Math.sqrt(t * t + r * r)) < 100 &&
              (s.beginPath(),
              (s.strokeStyle = `rgba(255, 255, 255, ${0.1 * (1 - t / 100)})`),
              (s.lineWidth = 0.5),
              s.moveTo(a.x, a.y),
              s.lineTo(e.x, e.y),
              s.stroke());
          });
          var e = a.x - i,
            t = a.y - n,
            r = Math.sqrt(e * e + t * t);
          r < 150 &&
            ((t = Math.atan2(t, e)),
            (e = (150 - r) / 150),
            (a.x += Math.cos(t) * e * 2),
            (a.y += Math.sin(t) * e * 2));
        }),
        requestAnimationFrame(e);
    })();
}
function effectImgParallaxAndMove() {
  gsap.utils.toArray(".img-move-parallax").forEach((e) => {
    var t = e.querySelector("img");
    gsap.set(e, { xPercent: 100 }),
      gsap.set(t, { yPercent: -10, scale: 1.2 }),
      gsap
        .timeline({
          scrollTrigger: {
            trigger: e,
            start: "top 60%",
            end: "center 50%",
            scrub: 1,
            once: !0
          }
        })
        .to(e, { xPercent: 0 }),
      gsap
        .timeline({
          scrollTrigger: {
            trigger: e,
            start: "center 70%",
            end: "bottom 30%",
            scrub: 1
          }
        })
        .to(t, { yPercent: 10 });
  });
}
let init = () => {
  gsap.registerPlugin(ScrollTrigger),
    animationText(),
    particleEffect(),
    animateTextKaraoke(),
    footer(),
    bannerParallax(),
    animationTextAuto(),
    magicCursor(),
    header(),
    ourService(),
    animation(),
    effectImgParallaxAndMove(),
    ScrollTrigger.refresh(!0);
};
preloadImages("img").then(() => {
  init();
}),
  $(window).on("beforeunload", function () {
    $(window).scrollTop(0);
  });
